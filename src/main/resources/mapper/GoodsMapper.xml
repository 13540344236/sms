<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cs.sms.mapper.GoodsMapper">
  <resultMap id="BaseResultMap" type="com.cs.sms.pojo.entity.Goods">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="category" jdbcType="VARCHAR" property="category" />
    <result column="purchase_price" jdbcType="DECIMAL" property="purchasePrice" />
    <result column="sale_price" jdbcType="DECIMAL" property="salePrice" />
    <result column="goods_specification" jdbcType="VARCHAR" property="goodsSpecification" />
    <result column="current_stock" jdbcType="BIGINT" property="currentStock" />
    <result column="low_limit_stock" jdbcType="BIGINT" property="lowLimitStock" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, url, name, category, purchase_price, sale_price, goods_specification, current_stock, 
    low_limit_stock
  </sql>
  <select id="selectByExample" parameterType="com.cs.sms.pojo.entity.GoodsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sms_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sms_goods
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sms_goods
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.cs.sms.pojo.entity.GoodsExample">
    delete from sms_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.cs.sms.pojo.entity.Goods">
    insert into sms_goods (id, url, name, 
      category, purchase_price, sale_price, 
      goods_specification, current_stock, low_limit_stock
      )
    values (#{id,jdbcType=BIGINT}, #{url,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{category,jdbcType=VARCHAR}, #{purchasePrice,jdbcType=DECIMAL}, #{salePrice,jdbcType=DECIMAL}, 
      #{goodsSpecification,jdbcType=VARCHAR}, #{currentStock,jdbcType=BIGINT}, #{lowLimitStock,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.cs.sms.pojo.entity.Goods">
    insert into sms_goods
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="category != null">
        category,
      </if>
      <if test="purchasePrice != null">
        purchase_price,
      </if>
      <if test="salePrice != null">
        sale_price,
      </if>
      <if test="goodsSpecification != null">
        goods_specification,
      </if>
      <if test="currentStock != null">
        current_stock,
      </if>
      <if test="lowLimitStock != null">
        low_limit_stock,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        #{category,jdbcType=VARCHAR},
      </if>
      <if test="purchasePrice != null">
        #{purchasePrice,jdbcType=DECIMAL},
      </if>
      <if test="salePrice != null">
        #{salePrice,jdbcType=DECIMAL},
      </if>
      <if test="goodsSpecification != null">
        #{goodsSpecification,jdbcType=VARCHAR},
      </if>
      <if test="currentStock != null">
        #{currentStock,jdbcType=BIGINT},
      </if>
      <if test="lowLimitStock != null">
        #{lowLimitStock,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cs.sms.pojo.entity.GoodsExample" resultType="java.lang.Long">
    select count(*) from sms_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update sms_goods
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.url != null">
        url = #{record.url,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.category != null">
        category = #{record.category,jdbcType=VARCHAR},
      </if>
      <if test="record.purchasePrice != null">
        purchase_price = #{record.purchasePrice,jdbcType=DECIMAL},
      </if>
      <if test="record.salePrice != null">
        sale_price = #{record.salePrice,jdbcType=DECIMAL},
      </if>
      <if test="record.goodsSpecification != null">
        goods_specification = #{record.goodsSpecification,jdbcType=VARCHAR},
      </if>
      <if test="record.currentStock != null">
        current_stock = #{record.currentStock,jdbcType=BIGINT},
      </if>
      <if test="record.lowLimitStock != null">
        low_limit_stock = #{record.lowLimitStock,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update sms_goods
    set id = #{record.id,jdbcType=BIGINT},
      url = #{record.url,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      category = #{record.category,jdbcType=VARCHAR},
      purchase_price = #{record.purchasePrice,jdbcType=DECIMAL},
      sale_price = #{record.salePrice,jdbcType=DECIMAL},
      goods_specification = #{record.goodsSpecification,jdbcType=VARCHAR},
      current_stock = #{record.currentStock,jdbcType=BIGINT},
      low_limit_stock = #{record.lowLimitStock,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cs.sms.pojo.entity.Goods">
    update sms_goods
    <set>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        category = #{category,jdbcType=VARCHAR},
      </if>
      <if test="purchasePrice != null">
        purchase_price = #{purchasePrice,jdbcType=DECIMAL},
      </if>
      <if test="salePrice != null">
        sale_price = #{salePrice,jdbcType=DECIMAL},
      </if>
      <if test="goodsSpecification != null">
        goods_specification = #{goodsSpecification,jdbcType=VARCHAR},
      </if>
      <if test="currentStock != null">
        current_stock = #{currentStock,jdbcType=BIGINT},
      </if>
      <if test="lowLimitStock != null">
        low_limit_stock = #{lowLimitStock,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cs.sms.pojo.entity.Goods">
    update sms_goods
    set url = #{url,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      category = #{category,jdbcType=VARCHAR},
      purchase_price = #{purchasePrice,jdbcType=DECIMAL},
      sale_price = #{salePrice,jdbcType=DECIMAL},
      goods_specification = #{goodsSpecification,jdbcType=VARCHAR},
      current_stock = #{currentStock,jdbcType=BIGINT},
      low_limit_stock = #{lowLimitStock,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>